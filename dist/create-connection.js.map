{"version":3,"sources":["../src/create-connection.js"],"names":["pg","require","native","e","urlToConfig","connectionUrl","hostname","host","port","pathname","auth","parse","user","password","split","database","createConnection","userOptions","plugin","options","pluginOptions","state","pluginState","url","connectionName","connection","connectionOptions","_openPools","connectionConfig","config","Pool","connect","then","client"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA,IAAIA,EAAJ;;AAEA,IAAI;AACFC,UAAQ,WAAR;AACAD,OAAKC,QAAQ,IAAR,EAAcC,MAAnB;AACD,CAHD,CAGE,OAAOC,CAAP,EAAU;AACVH,OAAKC,QAAQ,IAAR,CAAL;AACD;;AAED,MAAMG,cAAc,UAAUC,aAAV,EAAyB;AAC3C,QAAM,EAACC,UAAUC,IAAX,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,IAAjC,KAAyC,cAAIC,KAAJ,CAAUN,aAAV,CAA/C;AACA,QAAM,CAACO,IAAD,EAAOC,QAAP,IAAmBH,OAAOA,KAAKI,KAAL,CAAW,GAAX,CAAP,GAAyB,EAAlD;AACA,QAAM,GAAGC,QAAH,IAAeN,WAAWA,SAASK,KAAT,CAAe,GAAf,CAAX,GAAiC,EAAtD;;AAEA,SAAO;AACLF,QADK;AAELC,YAFK;AAGLN,QAHK;AAILC,QAJK;AAKLO;AALK,GAAP;AAOD,CAZD;;AAcA,MAAMC,mBAAmB,UAAUC,WAAV,EAAuBC,MAAvB,EAA+B;AACtD,QAAM,EAACC,SAASC,aAAV,EAAyBC,OAAOC,WAAhC,KAA+CJ,MAArD;AACA,QAAMC,UAAU,2BAAgBC,aAAhB,EAA+BH,eAAe,EAA9C,CAAhB;;AAEA,QAAM;AACJM,SAAKlB,aADD;AAEJmB,kBAFI;AAGJC,gBAAYC;AAHR,MAIFP,OAJJ;;AAMA,QAAM,EAACQ,UAAD,KAAeL,WAArB;;AAEA,MAAI,CAACK,WAAWH,cAAX,CAAL,EAAiC;AAC/B,UAAMI,mBAAmBxB,YAAYC,aAAZ,CAAzB;AACA,UAAMwB,SAAS,2BAAgBD,gBAAhB,EAAkCF,iBAAlC,CAAf;AACAC,eAAWH,cAAX,IAA6B,IAAIxB,GAAG8B,IAAP,CAAYD,MAAZ,CAA7B;AACD;;AAED,SAAOF,WAAWH,cAAX,EAA2BO,OAA3B,GACJC,IADI,CACCC,UAAU;AACd,WAAO,EAACA,MAAD,EAAP;AACD,GAHI,CAAP;AAID,CAtBD;;kBAwBejB,gB","file":"create-connection.js","sourcesContent":["import url from 'url';\nimport {applyToDefaults} from 'hoek';\n\nlet pg;\n\ntry {\n  require('pg-native');\n  pg = require('pg').native;\n} catch (e) {\n  pg = require('pg');\n}\n\nconst urlToConfig = function (connectionUrl) {\n  const {hostname: host, port, pathname, auth} = url.parse(connectionUrl);\n  const [user, password] = auth ? auth.split(':') : [];\n  const [, database] = pathname ? pathname.split('/') : [];\n\n  return {\n    user,\n    password,\n    host,\n    port,\n    database\n  };\n};\n\nconst createConnection = function (userOptions, plugin) {\n  const {options: pluginOptions, state: pluginState} = plugin;\n  const options = applyToDefaults(pluginOptions, userOptions || {});\n\n  const {\n    url: connectionUrl,\n    connectionName,\n    connection: connectionOptions\n  } = options;\n\n  const {_openPools} = pluginState;\n\n  if (!_openPools[connectionName]) {\n    const connectionConfig = urlToConfig(connectionUrl);\n    const config = applyToDefaults(connectionConfig, connectionOptions);\n    _openPools[connectionName] = new pg.Pool(config);\n  }\n\n  return _openPools[connectionName].connect()\n    .then(client => {\n      return {client};\n    });\n};\n\nexport default createConnection;\n"]}