{"version":3,"sources":["../src/build-store-set-query.js"],"names":["pushIndexFactory","value","keys","values","placeholders","modifier","ki","i","p","k","v","push","buildStoreSetQuery","key","index","table","isUpdate","pushIndex","forEach","text","join"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,mBAAmB,UAAU;AACjCC,OADiC;AAEjCC,MAFiC;AAGjCC,QAHiC;AAIjCC,cAJiC;AAKjCC;AALiC,CAAV,EAMtB;AACD,SAAO,CAACC,EAAD,EAAKC,CAAL,KAAW;AAChB,UAAMC,IAAID,IAAIF,QAAd;AACA,QAAII,CAAJ;AACA,QAAIC,CAAJ;AACA,QAAI,wBAASJ,EAAT,CAAJ,EAAkB;AAChBG,UAAIH,EAAJ;AACAI,UAAI,mBAAIT,KAAJ,EAAWQ,CAAX,CAAJ;AACD,KAHD,MAGO,IAAI,uBAAQH,EAAR,CAAJ,EAAiB;AACtBG,UAAIH,GAAG,CAAH,CAAJ;AACAI,UAAIJ,GAAG,CAAH,CAAJ;AACD,KAHM,MAGA,IAAI,wBAASA,EAAT,CAAJ,EAAkB;AACvBG,UAAI,oBAAYH,EAAZ,EAAgB,CAAhB,CAAJ;AACAI,UAAIJ,GAAGG,CAAH,CAAJ;AACD;AACDP,SAAKS,IAAL,CAAUF,CAAV;AACAN,WAAOQ,IAAP,CAAYD,CAAZ;AACAN,iBAAaO,IAAb,CAAmB,IAAGH,CAAE,EAAxB;AACD,GAjBD;AAkBD,CAzBD;;AA2BA,MAAMI,qBAAqB,UAAU,EAACC,GAAD,EAAMZ,KAAN,EAAaa,KAAb,EAAoBC,KAApB,EAA2BC,QAA3B,EAAV,EAAgD;AACzE,QAAMd,OAAO,CAAC,KAAD,CAAb;AACA,QAAME,eAAe,CAAC,IAAD,CAArB;AACA,QAAMD,SAAS,CAACF,KAAD,CAAf;AACA,QAAMI,WAAW,CAAjB;;AAEA,MAAIS,KAAJ,EAAW;AACT,UAAMG,YAAYjB,iBAAiB;AACjCC,WADiC;AAEjCC,UAFiC;AAGjCC,YAHiC;AAIjCC,kBAJiC;AAKjCC;AALiC,KAAjB,CAAlB;;AAQA,QAAI,uBAAQS,KAAR,CAAJ,EAAoB;AAClBA,YAAMI,OAAN,CAAcD,SAAd;AACD,KAFD,MAEO,IAAI,wBAASH,KAAT,CAAJ,EAAqB;AAC1B,0BAAYA,KAAZ,EAAmBI,OAAnB,CAA2B,CAACZ,EAAD,EAAKC,CAAL,KAAW;AACpCU,kBAAU,CAACX,EAAD,EAAKQ,MAAMR,EAAN,CAAL,CAAV,EAA2BC,CAA3B;AACD,OAFD;AAGD;AACF;;AAED,MAAIY,IAAJ;;AAEA,MAAIH,QAAJ,EAAc;AACZG,WAAQ,UAASJ,KAAM,SAAQb,KAAKkB,IAAL,CAAU,IAAV,CAAgB,QAAOhB,aAAagB,IAAb,CAAkB,IAAlB,CAAwB,kBAAiBP,GAAI,IAAnG;AACD,GAFD,MAEO;AACLM,WAAQ,eAAcJ,KAAM,UAASb,KAAKkB,IAAL,CAAU,IAAV,CAAgB,cAAaP,GAAI,MAAKT,aAAagB,IAAb,CAAkB,IAAlB,CAAwB,IAAnG;AACD;;AAED,SAAO,EAACD,IAAD,EAAOhB,MAAP,EAAP;AACD,CAjCD;;kBAmCeS,kB","file":"build-store-set-query.js","sourcesContent":["import isArray from 'lodash/isArray';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport get from 'lodash/get';\n\nconst pushIndexFactory = function ({\n  value,\n  keys,\n  values,\n  placeholders,\n  modifier\n}) {\n  return (ki, i) => {\n    const p = i + modifier;\n    let k;\n    let v;\n    if (isString(ki)) {\n      k = ki;\n      v = get(value, k);\n    } else if (isArray(ki)) {\n      k = ki[0];\n      v = ki[1];\n    } else if (isObject(ki)) {\n      k = Object.keys(ki)[0];\n      v = ki[k];\n    }\n    keys.push(k);\n    values.push(v);\n    placeholders.push(`$${p}`);\n  };\n};\n\nconst buildStoreSetQuery = function ({key, value, index, table, isUpdate}) {\n  const keys = ['val'];\n  const placeholders = ['$1'];\n  const values = [value];\n  const modifier = 2;\n\n  if (index) {\n    const pushIndex = pushIndexFactory({\n      value,\n      keys,\n      values,\n      placeholders,\n      modifier\n    });\n\n    if (isArray(index)) {\n      index.forEach(pushIndex);\n    } else if (isObject(index)) {\n      Object.keys(index).forEach((ki, i) => {\n        pushIndex([ki, index[ki]], i);\n      });\n    }\n  }\n\n  let text;\n\n  if (isUpdate) {\n    text = `UPDATE ${table} SET (${keys.join(', ')}) = (${placeholders.join(', ')}) WHERE key = '${key}';`;\n  } else {\n    text = `INSERT INTO ${table} (key, ${keys.join(', ')}) VALUES ('${key}', ${placeholders.join(', ')});`;\n  }\n\n  return {text, values};\n};\n\nexport default buildStoreSetQuery;\n"]}