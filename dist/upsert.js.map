{"version":3,"sources":["../src/upsert.js"],"names":["getQueryText","table","key","existingKey","text","getVal","existingVal","newVal","merge","val","upsert","client","options","generateKeyFn","generate","got","values","results","query","error"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,eAAe,UAAU,EAACC,KAAD,EAAQC,GAAR,EAAaC,WAAb,EAAV,EAAqC;AACxD,MAAIC,IAAJ;;AAEA,MAAID,WAAJ,EAAiB;AACfC,WAAQ,UAASH,KAAM,kCAAiCC,GAAI,IAA5D;AACD,GAFD,MAEO;AACLE,WAAQ,eAAcH,KAAM,wBAAuBC,GAAI,SAAvD;AACD;;AAED,SAAOE,IAAP;AACD,CAVD;;AAYA,MAAMC,SAAS,UAAU,EAACC,WAAD,EAAcC,MAAd,EAAsBC,KAAtB,EAAV,EAAwC;AACrD,MAAIC,MAAM,EAAV;;AAEA,MAAID,SAASF,WAAb,EAA0B;AACxBG,UAAM,2BAAgBH,WAAhB,EAA6BC,MAA7B,EAAqC,IAArC,CAAN;AACD,GAFD,MAEO;AACLE,UAAMF,MAAN;AACD;;AAED,SAAOE,GAAP;AACD,CAVD;;AAYA,MAAMC;AAAA,6CAAS,WAAgB;AAC7BC,UAD6B;AAE7BV,SAF6B;AAG7BC,OAH6B;AAI7BO,SAAKF,MAJwB;AAK7BK,WAL6B;AAM7BC;AAN6B,GAAhB,EAOZ;AACD,QAAI;AACF,YAAM,EAACL,KAAD,KAAUI,WAAW,EAA3B;;AAEAC,sBAAgBA,iBAAiB,kBAAQC,QAAzC;;AAEA,YAAMC,MAAM,OAAMb,GAAN,KAAa,mBAAI,EAACS,MAAD,EAASV,KAAT,EAAgBC,GAAhB,EAAJ,CAAzB;;AAEA,UAAIC,WAAJ;AACA,UAAIG,WAAJ;;AAEA,UAAIS,GAAJ,EAAS;AACPZ,sBAAcY,IAAIb,GAAlB;AACAI,sBAAcS,IAAIN,GAAlB;AACD;;AAEDP,YAAMC,eAAeD,GAArB;;AAEA,UAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;AACnCA,cAAMW,eAAN;AACD;;AAED,YAAMT,OAAOJ,aAAa,EAACC,KAAD,EAAQC,GAAR,EAAaC,WAAb,EAAb,CAAb;AACA,YAAMM,MAAMJ,OAAO,EAACC,WAAD,EAAcC,MAAd,EAAsBC,KAAtB,EAAP,CAAZ;AACA,YAAMQ,SAAS,CAACP,GAAD,CAAf;AACA,YAAMQ,UAAU,MAAMN,OAAOO,KAAP,CAAa,EAACd,IAAD,EAAOY,MAAP,EAAb,CAAtB;;AAEA,aAAO;AACLL,cADK;AAELM,eAFK;AAGLf,WAHK;AAILO;AAJK,OAAP;AAMD,KAhCD,CAgCE,OAAOU,KAAP,EAAc;AACd,aAAO;AACLR,cADK;AAELQ;AAFK,OAAP;AAID;AACF,GA9CK;;AAAA;AAAA;AAAA;AAAA,IAAN;;kBAgDeT,M","file":"upsert.js","sourcesContent":["import shortid from 'shortid';\nimport {applyToDefaults} from 'hoek';\nimport get from './get';\n\nconst getQueryText = function ({table, key, existingKey}) {\n  let text;\n\n  if (existingKey) {\n    text = `UPDATE ${table} SET (val) = ($1) WHERE key = '${key}';`;\n  } else {\n    text = `INSERT INTO ${table} (key, val) VALUES ('${key}', $1);`;\n  }\n\n  return text;\n};\n\nconst getVal = function ({existingVal, newVal, merge}) {\n  let val = {};\n\n  if (merge && existingVal) {\n    val = applyToDefaults(existingVal, newVal, true);\n  } else {\n    val = newVal;\n  }\n\n  return val;\n};\n\nconst upsert = async function ({\n  client,\n  table,\n  key,\n  val: newVal,\n  options,\n  generateKeyFn\n}) {\n  try {\n    const {merge} = options || {};\n\n    generateKeyFn = generateKeyFn || shortid.generate;\n\n    const got = await key && get({client, table, key});\n\n    let existingKey;\n    let existingVal;\n\n    if (got) {\n      existingKey = got.key;\n      existingVal = got.val;\n    }\n\n    key = existingKey || key;\n\n    if (!key || typeof key !== 'string') {\n      key = generateKeyFn();\n    }\n\n    const text = getQueryText({table, key, existingKey});\n    const val = getVal({existingVal, newVal, merge});\n    const values = [val];\n    const results = await client.query({text, values});\n\n    return {\n      client,\n      results,\n      key,\n      val\n    };\n  } catch (error) {\n    return {\n      client,\n      error\n    };\n  }\n};\n\nexport default upsert;\n"]}